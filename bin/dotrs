#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require_relative '../lib/version'
require_relative '../lib/commands'
require_relative '../lib/config'

Config.load

# Set up the options
options = { short: false, tree: false }
optparse = OptionParser.new do |opts|
  opts.banner = "Straightforward dotfiles management.\n\n"                     \
                "Usage: dotrs COMMAND [OPTION]\n"                              \
                "       dotrs --help | --version\n\n"                          \
                "Commands:\n"                                                  \
                "\tadd FILE...\t\tAdd FILE to the tracked files\n"             \
                "\tapply\t\t\tLink all tracked files to their real location\n" \
                "\tdiff\t\t\tSee local changes since last pull\n"              \
                "\tinit REMOTE\t\tClone the REMOTE repository\n"               \
                "\tlist\t\t\tList all currently tracked files\n"               \
                "\tremove FILE...\t\tRemove FILE from being tracked\n"         \
                "\tpull\t\t\tPull the latest changes\n"                        \
                "\tpush\t\t\tPush local changes\n"                             \
                "\nOptions:\n"
  opts.on('-s', '--short', 'Use with diff, display file names only') do
    options[:short] = true
  end
  opts.on('-t', '--tree', 'Use with list, display files as a tree') do
    options[:tree] = true
  end
  opts.on('-h', '--help', 'Display this help and exit') do
    puts opts
    exit(true)
  end
  opts.on('-v', '--version', 'Display version number and exit') do
    puts "dotrs #{Dotrs::VERSION}"
    exit(true)
  end
end

# Parse and check for invalid options
begin
  optparse.parse!
rescue OptionParser::InvalidOption
  abort('dotrs: invalid option.')
end

# Check if a command has been given
abort('dotrs: no command given.') if ARGV.empty?

# Get the command given by the user
command = ARGV[0].to_sym

# Handle the init command
if command == :init
  abort('dotrs: missing argument for `init`') if ARGV[1].nil?
  Commands.init(ARGV[1])
  exit(true)
end

# Exit if REPO_PATH doesn't exist
abort('dotrs: not initialized') unless Dir.exist?(Config.repo_path)

# Handle other commands
begin
  case command
  when :add
    Commands.add(ARGV[1..-1])
  when :apply
    Commands.apply
  when :list
    Commands.list(tree: options[:tree])
  when :remove
    Commands.remove(ARGV[1..-1])
  when :pull
    Commands.pull
  when :push
    Commands.push
  when :diff
    Commands.diff(short: options[:short])
  else
    abort("dotrs: unknown command '#{ARGV[0]}'.")
  end
rescue Interrupt
  abort("\ndotrs: interrupted!")
end
